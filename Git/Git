# Git
* 버전 관리
* 백업
* 협업
---
### 원격 저장소 - Remote Repository
  * github의 Repository

### 로컬 저장소 - Local Repository
  * 개인 PC의 저장소

## Working tree & Index
* Working tree - 작업 공간 : 아직 버전으로 만들어지기 전 단계, 수정하는 파일들
* Staging area - 버전 관리할 파일들을 올림, 버전을 만들려는 파일들
* Repository - 만들어진 버전
---
## git 명령어

* git init [directory] - 해당 디렉토리를 git이 버전 관리하도록 지시함
* git log - 버전들의 목록을 보여줌
  * --all : 모든 브랜치가 보임
  * --graph : 시각적으로 표현
  * -- oneline : 한 줄로 간단하게 표현
  * --stat : 버전마다 변경 내역 확인
  * -p : 버전별...? 위랑 똑같나요?
* git reflog : git에서 내린 모든 명령과 버전들 볼 수 있음
  * reset --hard로 지운 commit의 id도 확인 가능 -> 복구 가능
* git status - Working tree에 있는 파일의 변경 여부를 확인함
* git add <file or directory> - 파일을 Working tree 에서 Staging area로 올림
* git diff - 변경된 부분(차이점)을 보여줌


* git checkout [commit id] - Head를 [commit id]에 해당하는 시점으로 옮김
  * [commit id] 부분에 master 입력하면 가장 최신 버전으로 돌아감
* git reset --hard [commit id] - 원하는 버전(commit id)으로 돌아감, 수정하고 있던 것까지 지워버림,
  수정한 것은 두고 싶으면 soft? mixed? 사용
  * <strong>이미 공유된 버전에 대해서 리셋하면 엉키는 문제 발생 </strong>
* git revert [commit id] - [commit id]로 인해 생긴 변화를 취소함, commit 자체는 그대로 둠
  * <strong>revert는 역순으로 하나씩 진행해야함</strong>

```
좀 더 찾아볼 것

reset [commit id] 돌아가길 원하는 커밋 위치
revert [commit id] 되돌릴 커밋 위치

A - B - C(HEAD)

B로 가고싶다면,
git reset --hard B
git revert C
이렇게 하면 된다.

revert할 부분에다가 다른 코드를 추가한 경우, conflict 발생함.
->


HEAD -> branch -> repository(commit, 버전)

checkout : HEAD의 값을 변경하는 것 => master가 변경되지 않음
git checkout 1(저장소) -> branch를 가리키지 않고 저장소를 가리킬 때, detached 상태에 있다고 함.

reset : branch가 가리키고 있는 저장소를 변경 => master가 변경됨
삭제처럼 작동할 수 있음, commit id를 알고 있다면 복구도 가능
  * --hard : repository, staging area, working directory 모두 되돌림
  * --mixed : repository, staging area까지만 되돌림
  * --soft : repository만 되돌림
```

* git commit - 새로운 버전을 만듦
  * -a : 한 번 "git add" 명령어를 사용하여 tracked 상태로 만든 파일을 commit과 동시에 add할 수 있다.
  (한 번이라도 tracked 시키지 않은 파일(올라가길 원하지 않는 파일)들을 배제할 수 있다.)
  * -m [message] : commit message를 작성함
  * --amend : commit message 수정
* Push - 로컬 저장소에서 변경된 이력을 원격 저장소에 공유하기 위해 업로드
* Pull - 원격 저장소에서 변경된 이력을 로컬 저장소에 update하기 위해 다운로드
* Fetch - 원격 저장소와 로컬 저장소의 변경 내역 확인
* Clone - 원격 저장소의 내용을 복제하여 통째로 로컬 저장소로 다운로드
* Merge - 원격 저장소에 다른 사람이 Push하여 내 로컬 저장소와 달라진 경우, 내 push가 거부된다.
---
## branch
  * 하나의 프로그램을 각기 다른 방향으로 발전시킬 때
  * branch들을 병합할 때, 같은 파일의 같은 부분을 수정할 경우 conflict(충돌) 발생
  * git branch - branch 목록을 보여줌
    * git branch [name] : [name] branch를 생성함
  * git checkout [name] : branch를 [name] branch로 변경함

## Merge
* master branch 와 branch B의 공통된 조상 branch를 base branch라고 함
* master branch에서 명령어를 입력
* git merge B - B를 master에 합쳐서 새로운 master 생성
* 충돌(같은 곳을 양 쪽에서 수정했을 때) 일어나면, 수동으로 해야함
  * 2way merge - 병합할 branch들끼리만 비교
  * 3way merge - 병합할 branch들과 base branch까지 비교

* 외부 Merge 도구
  * P4Merge
  * git config --global merge.tool p4mergetool
  * git config --global mergetool.p4mergetool.path "path"
  * git mergetool

### additional
* git workflow
* git flow
* cherry-pick : 부분적 병합
* rebase : 병합할 branch를 음.. rebase해서 --> 더 공부해서 작성하자 정확히 못쓰겠다.

---
## etc

* diff tool
* .gitignore - 버전 관리를 원하지 않는 파일들의 목록(개인 정보)
* commit id 대신 사용할 수 있는 tag
* backup
